cwe-316
Cryptographic issue
========>>>use char array instead of String to save sensitive data
char[] password=new char[5];
ch[0]=p;ch[1]=a;ch[2]=s;ch[3]=s;ch[4]=w;ch[5]=o;

why?
It would seem logical to collect and store the password in an object of type java.lang.String. However,
here's the caveat: Objects of type String are immutable, i.e., there are no methods defined that allow you to change
(overwrite) or zero out the contents of a String after usage. This feature makes String objects unsuitable for 
storing security sensitive information such as user passwords. You should always collect and store security 
sensitive information in a char array instead.

Guideline 2-2: Do not log highly sensitive information

Some information, such as Social Security numbers (SSNs) and passwords, is highly sensitive. This information
should not be kept for longer than necessary nor where it may be seen, even by administrators. For instance, 
it should not be sent to log files and its presence should not be detectable through searches. Some transient
data may be kept in mutable data structures, such as char arrays, and cleared immediately after use. Clearing
data structures has reduced effectiveness on typical Java runtime systems as objects are moved in memory
transparently to the programmer.

This guideline also has implications for implementation and use of lower-level libraries that do not have semantic
knowledge of the data they are dealing with. As an example, a low-level string parsing library may log the 
text it works on. An application may parse an SSN with the library. This creates a situation where the SSNs are 
available to administrators with access to the log files.

Character arrays (char[]) can be cleared after use by setting each character to zero and Strings not. If someone 
can somehow see the memory image, they can see a password in plain text if Strings are used, but if char[] is used, 
after purging data with 0's, the password is secure.
